#ifndef GENERIC_LIST_H
#define GENERIC_LIST_H

/*
===============================================================================
ТЗ: GenericList — универсальный односвязный список для хранения данных любого типа.
-------------------------------------------------------------------------------
Основная идея:
- Элемент списка (Node) хранит указатель на блок памяти с данными (void *data)
  фиксированного размера elem_size.
- При добавлении элемент копируется в выделенную память (deep copy).
- Все операции выполняются через универсальные функции, не зависящие от типа.

Память:
- Каждый элемент выделяет свою область под data.
- Удаление списка полностью освобождает все выделенные узлы и их data.
===============================================================================
*/

#include <stddef.h>
#include "../comparators.h"

typedef struct Node
{
    void *data;
    struct Node *next;
} Node;

typedef struct
{
    Node *head;
    size_t elem_size;
} GenericList;

/*
===============================================================================
Функция: createList
Назначение: Создаёт пустой список для хранения элементов произвольного размера.

Аргументы:
- elem_size: размер одного элемента (в байтах), например sizeof(int).

Возвращает:
- Указатель на новую структуру GenericList.

Ошибки:
- При ошибке выделения памяти завершает программу с сообщением.
===============================================================================
*/
GenericList *createList(size_t elem_size);

/*
===============================================================================
Функция: appendItem
Назначение: Добавляет элемент в конец списка (копирует переданные данные).

Аргументы:
- list: указатель на список.
- data: указатель на данные, которые нужно скопировать в новый элемент.

Примечания:
- Функция делает копию данных по указателю (deep copy).
- Если список пуст — новый элемент становится головой списка.
- Если не пуст — добавляется в конец (O(n) по времени).

Ошибки:
- При ошибке выделения памяти завершает программу.
===============================================================================
*/
void appendItem(GenericList *list, void *data);

/*
===============================================================================
Функция: findItem
Назначение: Находит индекс первого элемента, равного заданному значению.

Аргументы:
- list: указатель на список.
- value: указатель на значение для поиска.
- cmp: функция сравнения элементов (EqualsFunc).
       Должна возвращать 1, если элементы равны, и 0 — если нет.

Возвращает:
- Индекс найденного элемента (начиная с 0),
- или (unsigned int)-1, если элемент не найден или список пуст.

Пример функции сравнения:
    int intEquals(const void *a, const void *b) {
        return *(int *)a == *(int *)b;
    }
===============================================================================
*/
unsigned int findItem(GenericList *list, void *value, EqualsFunc cmp);

/*
===============================================================================
Функция: popItem
Назначение: Удаляет элемент по индексу и возвращает его копию.

Аргументы:
- list: указатель на список.
- index: индекс удаляемого элемента (начиная с 0).

Возвращает:
- Указатель на копию данных (память выделена внутри функции — нужно освободить),
- NULL — если индекс вне диапазона или список пуст.

Поведение:
- Копирует данные элемента перед удалением.
- Корректно обновляет связи (head или previous->next).
===============================================================================
*/
void *popItem(GenericList *list, size_t index);

/*
===============================================================================
Функция: freeList
Назначение: Полностью очищает список и освобождает всю выделенную память.

Аргументы:
- list: указатель на список (может быть NULL).

Поведение:
- Освобождает память каждого элемента (data и Node).
- Затем освобождает саму структуру GenericList.
===============================================================================
*/
void freeList(GenericList *list);

/*
===============================================================================
Функция: listLength
Назначение: Возвращает количество элементов в списке.

Аргументы:
- list: указатель на список.

Возвращает:
- Количество элементов (0, если список пуст или NULL).

Сложность:
- O(n), требуется обход всего списка.
===============================================================================
*/
unsigned int listLength(GenericList *list);

#endif
