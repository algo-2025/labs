#ifndef BASE_TASKS_H
#define BASE_TASKS_H

#include "vector/generic.h"
#include "list/generic.h"
#include <stddef.h>

/*
===============================================================================
ТЗ: Базовые задачи для универсальных структур данных (GenericList и Vector)
===============================================================================
*/

/*
===============================================================================
Тип данных: Student
Назначение: Структура для хранения информации о студенте.

Поля:
- name: имя студента (строка до 50 символов)
- avg: средний балл (float)
===============================================================================
*/
typedef struct
{
    char name[50];
    float avg;
} Student;

/*
===============================================================================
Функция: findMaxStudent
Назначение: Находит студента с максимальным средним баллом в списке.

Аргументы:
- list: указатель на список студентов (GenericList с элементами Student)

Возвращает:
- Указатель на Student с максимальным баллом (не выделяет новую память),
- NULL — если список пуст или некорректен.

Примечания:
- Функция возвращает указатель на существующий элемент в списке
- Не освобождает память, выделенную внутри списка
===============================================================================
*/
Student *findMaxStudent(GenericList *list);

/*
===============================================================================
Функция: findMaxVector
Назначение: Находит максимальное значение в векторе.

Аргументы:
- vector: указатель на вектор с числовыми данными
- cmp: функция сравнения (возвращает 1 если первый больше второго, 0 иначе)

Возвращает:
- Указатель на копию максимального элемента (память выделена внутри функции — нужно освободить),
- NULL — если вектор пуст или некорректен.

Примечания:
- Тип данных в векторе должен быть совместим с функцией сравнения
===============================================================================
*/
void *findMaxVector(Vector *vector, EqualsFunc cmp);

/*
===============================================================================
Функция: removeDuplicatesList
Назначение: Удаляет дубликаты из списка, сохраняя порядок первого появления.

Аргументы:
- list: указатель на список с элементами любого типа
- cmp: функция сравнения элементов

Возвращает:
- 0 — при успешном выполнении,
- отрицательное число — при ошибке.

Примечания:
- Функция модифицирует исходный список
- Сохраняет порядок первого появления элементов
===============================================================================
*/
int removeDuplicatesList(GenericList *list, EqualsFunc cmp);

/*
===============================================================================
Функция: removeDuplicatesVector
Назначение: Удаляет дубликаты из вектора, сохраняя порядок первого появления.

Аргументы:
- vector: указатель на вектор с элементами любого типа
- cmp: функция сравнения элементов

Возвращает:
- 0 — при успешном выполнении,
- отрицательное число — при ошибке.

Примечания:
- Функция модифицирует исходный вектор
- Сохраняет порядок первого появления элементов
===============================================================================
*/
int removeDuplicatesVector(Vector *vector, EqualsFunc cmp);

#endif